{"version":3,"sources":["Components/FileUpload/index.tsx","Components/ProgressMeter/index.tsx","Components/ColorInput/index.tsx","Components/ColorForm/index.tsx","Components/Download/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FileUpload","prop","useState","isValid","setIsValid","file","setFile","message","type","alertState","setAlertState","className","encType","id","method","noValidate","htmlFor","accept","onChange","e","event","fileSize","target","files","item","size","fileIsValid","document","getElementById","reset","required","Alert","variant","hidden","Spinner","animation","role","Button","block","onClick","preventDefault","data","FormData","pdf","append","fetch","body","then","response","ok","Error","statusText","json","error","showColors","analysis_result","catch","disabled","paginationTexts","ProgressMeter","props","items","i","push","progress","ColorInput","id_input","color","id_preview","newValue","setNewValue","style_colorcode","style","backgroundColor","display","htmlparagraph_colorcode","temp_input_elem","createElement","value","textContent","after","select","execCommand","remove","pages","InputGroup","Prepend","Text","FormControl","placeholder","aria-placeholder","aria-label","aria-describedby","onBlur","hashtag_thingy_style","parentNode","children","length","updateColors","character","charAt","isValidColor","ColorForm","state","colors","mapOldColorsToNewColors","Map","errors","Set","alert","msg","active","waitingForServerResponse","formState","setFormState","colorInputsArray","index","newColor","update","$remove","$add","autoComplete","name","Array","from","join","element","querySelector","classList","add","setTimeout","$set","forEach","key","handleChange","b64","Download","Progress","oldFileName","newFileName","split","href","download","App","componentsByProgress","initial","setState","submittedPDF","b64_in","submittedColors","progress_enum","this","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d028b031.chunk.js","sourcesContent":["import React, { ChangeEvent, useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport './style.css';\r\n\r\n\r\nfunction FileUpload(prop: { showColors: (colorArray: Array<Array<String>>, file: File) => void }) {\r\n    const [isValid, setIsValid] = useState(false);\r\n    const [file, setFile] = useState({});\r\n    const [alertState, setAlertState] = useState({ message: \"\", type: \"\" });\r\n\r\n    function fileIsValid(event: ChangeEvent): Boolean {\r\n        const fileSize: number | undefined = (event?.target as HTMLInputElement)?.files?.item(0)?.size;\r\n        if (typeof fileSize === \"undefined\") {\r\n            return false;\r\n        } else if (typeof fileSize === \"number\") {\r\n            if (fileSize > 15728640) {\r\n                setAlertState({ message: \"The size of the PDF must be 15 MB or less\", type: \"warning\" });\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h4 className=\"mb-3\">PDF Document</h4>\r\n            <form encType=\"multipart/form-data\" id=\"id_ajax_upload_form\" method=\"POST\" noValidate>\r\n                <label htmlFor=\"input_pdf\">Choose a PDF Document: </label>\r\n                <br />\r\n                <input id=\"input_pdf\" type=\"file\" accept=\"application/pdf\" onChange={(e) => {\r\n                    if (fileIsValid(e) && e.target.files != null) {\r\n                        setFile(e.target.files[0])\r\n                        setIsValid(true);\r\n                        setAlertState({ message: \"\", type: \"\" });\r\n                    } else {\r\n                        setIsValid(false);\r\n                        (document.getElementById(\"id_ajax_upload_form\") as HTMLFormElement)?.reset();\r\n                    }\r\n                }} required></input>\r\n                <div className=\"status-wrapper\">\r\n                    <Alert\r\n                        variant={alertState.type}\r\n                        id=\"submit-status\"\r\n                        hidden={alertState.type === \"\"}>\r\n                        <Spinner\r\n                            animation=\"border\"\r\n                            role=\"status\"\r\n                            hidden={alertState.message !== \"Waiting for Server response\"}></Spinner>\r\n                        {alertState.message}</Alert>\r\n                </div>\r\n                <Button id=\"submit-pdf\" type=\"submit\" block onClick={(event: React.MouseEvent) => {\r\n                    event.preventDefault();\r\n                    if (isValid) {\r\n                        var data: FormData = new FormData();\r\n                        const pdf = file as Blob;\r\n                        data.append('file', pdf);\r\n                        setAlertState({ message: \"Waiting for Server response\", type: \"info\" });\r\n                        fetch(\"/ajax/react\", {\r\n                            method: 'POST',\r\n                            body: data\r\n                        })\r\n                            .then(response => {\r\n                                if (!response.ok) {\r\n                                    throw Error(response.statusText);\r\n                                }\r\n                                return response;\r\n                            })\r\n                            .then(response => response.json())\r\n                            .then(response => {\r\n                                if (response.error) {\r\n                                    setAlertState({ message: \"Server responded with error message: \" + response.message, type: \"danger\" });\r\n                                } else {\r\n                                    prop.showColors(response.analysis_result, file as File);\r\n                                }\r\n\r\n                            })\r\n                            .catch(function (error) {\r\n                                setAlertState({ message: error, type: \"danger\" });\r\n                            });\r\n                    } else {\r\n                        setAlertState({ message: \"Please select a Document first\", type: \"warning\" });\r\n                    }\r\n                }}\r\n                    disabled={alertState.message === \"Waiting for Server response\"}>\r\n                    {alertState.message !== \"Waiting for Server response\" ? \"Submit Document\" : \"Waiting...\"}\r\n                </Button>\r\n            </form>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default FileUpload;","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './style.css';\r\n\r\n\r\nconst paginationTexts = [\"Choose PDF\", \"Choose Colors\", \"Download your new PDF!\"];\r\n\r\nfunction ProgressMeter(props: { progress: any, progress_enum: any }) {\r\n    const items: JSX.Element[] = [];\r\n\r\n    for (var i = 0; i < 3; i++) {\r\n        items.push((<li\r\n            key={i}\r\n            id={\"progress-\" + i}\r\n            className={\"list-group-item flex-fill \"\r\n                + (i === props.progress ? \"list-group-item-primary\" : \"\")\r\n                + (i < props.progress ? \"list-group-item-secondary\" : \"\")\r\n            }\r\n        > { paginationTexts[i]}</li >));\r\n    }\r\n\r\n    return (\r\n        <div className=\"progress-wrapper\">\r\n            <ul className=\"list-group list-group-horizontal\">{items}</ul>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default ProgressMeter;\r\n\r\n","\r\nimport React, { CSSProperties, useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport './style.css'\r\n\r\nfunction isValidChar(character: string) {\r\n    return (character >= 'a' && character <= 'f')\r\n        || (character >= 'A' && character <= 'F')\r\n        || (character >= '0' && character <= '9');\r\n}\r\n\r\nfunction isValidColor(color: string): boolean {\r\n    if (color.length === 6) {\r\n        for (let i = 0; i < 6; i++) {\r\n            if (!isValidChar(color.charAt(i))) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    } else if (color.length === 7 && color.charAt(0) === '#') {\r\n        for (let i = 1; i < 7; i++) {\r\n            if (color.charAt(i) < 'a' || color.charAt(i) < 'f') {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nfunction ColorInput(props: {\r\n    color: string,\r\n    pages: string,\r\n    updateColors: (color: string, newColor: string | null) => any\r\n}) {\r\n    const id_input = \"input-\" + props.color;\r\n    const id_preview = \"pre-\" + props.color;\r\n\r\n    const [newValue, setNewValue] = useState(\"\");\r\n\r\n    // not sure why the as any is needed in the line below, but it doesn´t work without it\r\n    const style_colorcode: CSSProperties = { [\"backgroundColor\" as any]: props.color };\r\n    return (\r\n        <div>\r\n            <div className=\"colorcode\" style={style_colorcode}>\r\n                <div id={id_preview} className=\"right-side\" style={{ backgroundColor: newValue, display: newValue === \"\" ? \"None\" : \"block\" }}></div>\r\n                <p onClick={(event: React.MouseEvent) => {\r\n                    const htmlparagraph_colorcode = event.target as HTMLParagraphElement;\r\n                    const temp_input_elem = document.createElement(\"input\");\r\n                    temp_input_elem.value = htmlparagraph_colorcode.textContent != null ? htmlparagraph_colorcode.textContent : \"\";\r\n                    htmlparagraph_colorcode.after(temp_input_elem);\r\n                    temp_input_elem.select()\r\n                    document.execCommand(\"copy\");\r\n                    temp_input_elem.remove();\r\n                }}>{props.color}</p></div>\r\n            <p className=\"pages\">{props.pages}</p>\r\n            <InputGroup>\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text id={id_input} >#</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                    placeholder=\"new Color\"\r\n                    aria-placeholder=\"new Color\"\r\n                    aria-label=\"new Color\"\r\n                    aria-describedby={id_input}\r\n                    onBlur={(event: React.FocusEvent) => {\r\n                        const value = (event.target as HTMLInputElement).value;\r\n                        const hashtag_thingy_style = (event.target?.parentNode?.children[0].children[0] as HTMLDivElement).style;\r\n                        if (!(value.length === 0 || value.length === 6 || value.length === 7)) {\r\n                            // Input Element is invalid color => display red, add warning\r\n                            hashtag_thingy_style.backgroundColor = \"#dc3545\";\r\n                            hashtag_thingy_style.color = \"white\";\r\n                            props.updateColors(props.color, null);\r\n                            setNewValue(\"\");\r\n                        }\r\n                    }}\r\n                    onChange={(event: React.ChangeEvent) => {\r\n                        const value = (event.target as HTMLInputElement).value;\r\n                        const hashtag_thingy_style = (event.target?.parentNode?.children[0].children[0] as HTMLDivElement).style;\r\n                        if (value.length === 0) {\r\n                            if (value === \"\") {\r\n                                // Input Element is empty => reset to default\r\n                                hashtag_thingy_style.backgroundColor = \"#e9ecef\";\r\n                                hashtag_thingy_style.color = \"black\";\r\n                                props.updateColors(props.color, \"\");\r\n                                setNewValue(\"\");\r\n                            }\r\n                        } else if (value.length === 6 || value.length === 7) {\r\n                            if (isValidColor(value)) {\r\n                                // Input Element is valid color => display green, add to state\r\n                                hashtag_thingy_style.backgroundColor = \"#28a745\";\r\n                                hashtag_thingy_style.color = \"white\";\r\n                                props.updateColors(props.color, value);\r\n                                setNewValue(\"#\" + value);\r\n                            } else {\r\n                                // Input Element is invalid color => display red, add warning\r\n                                hashtag_thingy_style.backgroundColor = \"#dc3545\";\r\n                                hashtag_thingy_style.color = \"white\";\r\n                                props.updateColors(props.color, null);\r\n                                setNewValue(\"\");\r\n                            }\r\n                        }\r\n                    }}\r\n                />\r\n            </InputGroup >\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default ColorInput;","import React, { useState } from 'react';\r\nimport ColorInput from '../ColorInput'\r\nimport './style.css';\r\nimport 'animate.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport update from 'immutability-helper';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nfunction ColorForm(props: { state: () => any, handleChange: (b64: string) => any }) {\r\n    const state = props.state();\r\n    const colors = state.colors;\r\n    const file = state.file;\r\n\r\n    const [formState, setFormState] = useState({\r\n        mapOldColorsToNewColors: new Map(),\r\n        errors: new Set(),\r\n        alert: {\r\n            type: \"danger\",\r\n            msg: \"You submitted invalid new colors for: \",\r\n            active: false\r\n        },\r\n        waitingForServerResponse: false\r\n    });\r\n\r\n    const colorInputsArray: Array<JSX.Element> = [];\r\n\r\n    for (var index in colors) {\r\n        colorInputsArray.push(\r\n            <ColorInput\r\n                updateColors={(color: string, newColor: string | null) => {\r\n                    if (newColor === null) {\r\n                        // Error-Case\r\n                        setFormState((state) => update(state, {\r\n                            mapOldColorsToNewColors: { $remove: [color] },\r\n                            errors: { $add: [color] }\r\n                        }));\r\n                    } else if (newColor === \"\") {\r\n                        // Reset-Case\r\n                        setFormState((state) => update(state, {\r\n                            mapOldColorsToNewColors: { $remove: [color] },\r\n                            errors: { $remove: [color] }\r\n                        }));\r\n                    } else {\r\n                        // Valid-Color-Case\r\n                        setFormState((state) => update(state, {\r\n                            mapOldColorsToNewColors: { $add: [[color, newColor]] },\r\n                            errors: { $remove: [color] }\r\n                        }));\r\n                    }\r\n                }}\r\n                key={index}\r\n                color={colors[index][0]}\r\n                pages={colors[index][1]}\r\n            />);\r\n    }\r\n\r\n    return (\r\n        <form id=\"form-colors\" autoComplete=\"off\">\r\n            <p><b>Showing Colors for: </b>{file.name}</p>\r\n            <div className=\"analysis_result\">\r\n                {colorInputsArray}\r\n            </div>\r\n            <div className=\"status-wrapper\">\r\n                <Alert\r\n                    variant={formState.alert.type}\r\n                    id=\"submit-status\"\r\n                    hidden={formState.errors.size === 0 && !formState.alert.active}>\r\n                    <Spinner\r\n                        animation=\"border\"\r\n                        role=\"status\"\r\n                        hidden={formState.alert.msg !== \"Waiting for Server response...\"}></Spinner>\r\n                    {formState.alert.msg + (formState.errors.size !== 0 ? Array.from(formState.errors).join(\", \") : \"\")}\r\n                </Alert>\r\n            </div>\r\n            <Button type=\"submit\"\r\n                onClick={\r\n                    ((event: React.MouseEvent) => {\r\n                        event.preventDefault();\r\n                        if (formState.errors.size !== 0) {\r\n                            const element = document.querySelector('#submit-status');\r\n                            element?.classList.add('animate__animated', 'animate__pulse');\r\n                            setTimeout(function () {\r\n                                element?.classList.remove('animate__pulse');\r\n                            }, 1000);\r\n                        } else if (formState.mapOldColorsToNewColors.size > 0) {\r\n                            setFormState((state) => update(state, {\r\n                                alert: {\r\n                                    active: { $set: true },\r\n                                    type: { $set: \"info\" },\r\n                                    msg: { $set: \"Waiting for Server response...\" }\r\n                                }\r\n                            }));\r\n                            var data: FormData = new FormData();\r\n                            const pdf = file as Blob;\r\n                            data.append('file', pdf);\r\n                            formState.mapOldColorsToNewColors.forEach((value, key) => {\r\n                                data.append(key, value);\r\n                            });\r\n                            fetch(\"/ajax/process\", {\r\n                                method: 'POST',\r\n                                body: data\r\n                            })\r\n                                .then(response => {\r\n                                    if (!response.ok) {\r\n                                        throw Error(response.statusText);\r\n                                    }\r\n                                    return response;\r\n                                })\r\n                                .then(response => response.json())\r\n                                .then(response => {\r\n                                    if (response.error) {\r\n                                        setFormState((state) => update(state, {\r\n                                            alert: {\r\n                                                active: { $set: true },\r\n                                                type: { $set: \"danger\" },\r\n                                                msg: { $set: \"Request came back with the following error message: \" + response.message }\r\n                                            }\r\n                                        }));\r\n                                    } else {\r\n                                        props.handleChange(response.b64);\r\n                                    }\r\n                                })\r\n                                .catch(function (error) {\r\n                                    setFormState((state) => update(state, {\r\n                                        alert: {\r\n                                            active: { $set: true },\r\n                                            type: { $set: \"danger\" },\r\n                                            msg: { $set: \"Request failed: \" + error }\r\n                                        }\r\n                                    }));\r\n                                });\r\n                        }\r\n                    })\r\n                }\r\n                block\r\n                disabled={formState.alert.msg === \"Waiting for Server response...\"}>\r\n                {formState.alert.msg !== \"Waiting for Server response...\" ? \"Submit Colors\" : \"Waiting...\"}</Button>\r\n        </form >\r\n\r\n    );\r\n}\r\n\r\nexport default ColorForm;\r\n\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction Download(props: { b64: () => string, oldFileName: () => string | undefined }) {\r\n    const oldFileName = props.oldFileName();\r\n    const newFileName = oldFileName?.split(\".pdf\")[0] + \"-printable\";\r\n    return (\r\n        <div>\r\n            <h4 className=\"mb-3\">PDF Document</h4>\r\n            <a\r\n                href={\"data:application/pdf;base64,\" + props.b64()}\r\n                className=\"btn btn-success btn-block\" download={newFileName}>\r\n                Download your new PDF!\r\n                </a>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Download;","import React from 'react';\nimport FileUpload from './Components/FileUpload';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ProgressMeter from './Components/ProgressMeter';\nimport ColorForm from './Components/ColorForm'\nimport Download from './Components/Download';\n\nenum Progress {\n  initial = 0,\n  submittedPDF = 1,\n  submittedColors = 2\n}\n\n\n\ntype ComponentMap = { [key in Progress]: JSX.Element | null }\n\nclass App extends React.Component<{}, { colors: Array<Array<String>> | null, progress: Progress, file: File | null, b64: string }> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      colors: null,\n      progress: Progress.initial,\n      file: null,\n      b64: \"\"\n    }\n  }\n\n  displayWarning(msg: String): void {\n    alert(msg);\n  }\n\n\n  readonly componentsByProgress: ComponentMap = {\n    [Progress.initial]:\n      <FileUpload\n        showColors={\n          (colors: Array<Array<String>>, file: File) => {\n            this.setState({ colors: colors, progress: Progress.submittedPDF, file: file });\n          }} ></FileUpload >,\n    [Progress.submittedPDF]:\n      <ColorForm\n        state={() => { return this.state; }}\n        handleChange={\n          (b64_in: string) => { this.setState({ b64: b64_in, progress: Progress.submittedColors }); }\n        } ></ColorForm >,\n    [Progress.submittedColors]:\n      <Download\n        b64={() => { return this.state.b64; }}\n        oldFileName={() => { return this.state.file?.name }}></Download>,\n  }\n\n  render() {\n    return (\n      <div>\n        <ProgressMeter progress_enum={Progress} progress={this.state.progress}></ProgressMeter>\n        {this.componentsByProgress[this.state.progress]}\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}