{"version":3,"sources":["Components/FileUpload/index.tsx","Components/ProgressMeter/index.tsx","Components/ColorInput/index.tsx","Components/listeners.ts","Components/ColorForm/index.tsx","Components/Download/index.tsx","App.tsx","index.tsx"],"names":["FileUpload","prop","useState","isValid","setIsValid","file","setFile","message","type","alertState","setAlertState","waitingForResponse","setWaitingForResponse","className","encType","id","method","noValidate","htmlFor","accept","disabled","onChange","event","fileSize","target","files","item","size","fileIsValid","document","getElementById","reset","required","Alert","variant","hidden","Spinner","animation","role","Button","onClick","preventDefault","data","FormData","pdf","append","fetch","body","then","response","ok","Error","statusText","json","error","showColors","analysis_result","catch","block","paginationTexts","ProgressMeter","COLORSTATUS","props","items","i","push","progress","messageLookup","Map","empty","valid","invalid","same","incomplete","ColorInput","handleOnBlur","status","updateColors","color","value","handleOnChange","nval","replace","substring","toLowerCase","length","setStatus","setValue","style","backgroundColor","display","htmlparagraph_colorcode","temp_input_elem","createElement","after","select","execCommand","remove","pages","OverlayTrigger","placement","transition","overlay","Tooltip","show","get","ref","triggerHandler","InputGroup","Prepend","Text","FormControl","placeholder","aria-placeholder","aria-label","aria-describedby","onBlur","beforeUnloadListener","returnValue","ColorForm","window","addEventListener","state","colors","mapOldColorsToNewColors","errors","Set","alert","msg","active","waitingForServerResponse","formState","setFormState","colorInputsArray","index","newColor","update","$remove","$add","$set","autoComplete","name","Array","from","join","element","querySelector","classList","add","setTimeout","forEach","key","handleChange","b64","Download","Progress","oldFileName","newFileName","split","href","download","removeEventListener","App","componentsByProgress","initial","setState","submittedPDF","b64_in","submittedColors","progress_enum","this","React","Component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.cf773e49.chunk.js","sourcesContent":["import React, { ChangeEvent, useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport './style.css';\r\n\r\n\r\nfunction FileUpload(prop: {\r\n    showColors: (colorArray: Array<Array<String>>,\r\n        file: File) => void\r\n}) {\r\n    const [isValid, setIsValid] = useState(false);\r\n    const [file, setFile] = useState({});\r\n    const [alertState, setAlertState] = useState({ message: \"\", type: \"\" });\r\n    const [waitingForResponse, setWaitingForResponse] = useState(false);\r\n\r\n    function fileIsValid(event: ChangeEvent): Boolean {\r\n        const fileSize: number | undefined = (event?.target as HTMLInputElement)?.files?.item(0)?.size;\r\n        if (typeof fileSize === \"undefined\") {\r\n            return false;\r\n        } else if (typeof fileSize === \"number\") {\r\n            if (fileSize > 15728640) {\r\n                setAlertState({ message: \"The size of the PDF must be 15 MB or less\", type: \"warning\" });\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function handleClick(event: React.MouseEvent): void {\r\n        event.preventDefault();\r\n        if (isValid) {\r\n            var data: FormData = new FormData();\r\n            const pdf = file as Blob;\r\n            data.append('file', pdf);\r\n            setAlertState({\r\n                message: \"Waiting for Server response\",\r\n                type: \"info\"\r\n            });\r\n            setWaitingForResponse(true);\r\n            fetch(\"/ajax/react\", {\r\n                method: 'POST',\r\n                body: data\r\n            })\r\n                .then(response => {\r\n                    if (!response.ok) {\r\n                        throw Error(response.statusText);\r\n                    }\r\n                    return response;\r\n                })\r\n                .then(response => response.json())\r\n                .then(response => {\r\n                    if (response.error) {\r\n                        setAlertState({\r\n                            message: \"Server responded with error message: \" + response.message,\r\n                            type: \"danger\"\r\n                        });\r\n                        setWaitingForResponse(false);\r\n                    } else {\r\n                        prop.showColors(response.analysis_result, file as File);\r\n                    }\r\n\r\n                })\r\n                .catch(function (error) {\r\n                    setAlertState({\r\n                        message: \"\" + error,\r\n                        type: \"danger\"\r\n                    });\r\n                    setWaitingForResponse(false);\r\n                });\r\n        } else {\r\n            setAlertState({\r\n                message: \"Please select a Document first\",\r\n                type: \"warning\"\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h4 className=\"mb-3\">PDF Document</h4>\r\n            <form\r\n                encType=\"multipart/form-data\"\r\n                id=\"id_ajax_upload_form\"\r\n                method=\"POST\"\r\n                noValidate>\r\n                <label htmlFor=\"input_pdf\">Choose a PDF Document: </label>\r\n                <br />\r\n                <input\r\n                    id=\"input_pdf\"\r\n                    type=\"file\"\r\n                    accept=\"application/pdf\"\r\n                    disabled={waitingForResponse}\r\n                    onChange={(event) => {\r\n                        if (fileIsValid(event) && event.target.files != null) {\r\n                            setFile(event.target.files[0])\r\n                            setIsValid(true);\r\n                            setAlertState({ message: \"\", type: \"\" });\r\n                        } else {\r\n                            setIsValid(false);\r\n                            (document.getElementById(\"id_ajax_upload_form\") as HTMLFormElement)?.reset();\r\n                        }\r\n                    }} required></input>\r\n                <div className=\"status-wrapper\">\r\n                    <Alert\r\n                        variant={alertState.type}\r\n                        id=\"submit-status\"\r\n                        hidden={alertState.type === \"\"}>\r\n                        <Spinner\r\n                            animation=\"border\"\r\n                            role=\"status\"\r\n                            hidden={!waitingForResponse}></Spinner>\r\n                        {alertState.message}</Alert>\r\n                </div>\r\n                <Button\r\n                    id=\"submit-pdf\"\r\n                    type=\"submit\"\r\n                    onClick={handleClick}\r\n                    disabled={waitingForResponse}\r\n                    block>\r\n                    {!waitingForResponse ? \"Submit Document\" : \"Waiting...\"}\r\n                </Button>\r\n            </form>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default FileUpload;","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './style.css';\r\n\r\n\r\nconst paginationTexts = [\"Choose PDF\", \"Choose Colors\", \"Download PDF!\"];\r\n\r\nfunction ProgressMeter(props: { progress: any, progress_enum: any }) {\r\n    const items: JSX.Element[] = [];\r\n\r\n    for (var i = 0; i < 3; i++) {\r\n        items.push((<li\r\n            key={i}\r\n            id={\"progress-\" + i}\r\n            className={\"list-group-item flex-fill \"\r\n                + (i === props.progress ? \"list-group-item-primary\" : \"\")\r\n                + (i < props.progress ? \"list-group-item-secondary\" : \"\")\r\n            }\r\n        > { paginationTexts[i]}</li >));\r\n    }\r\n\r\n    return (\r\n        <div className=\"progress-wrapper\">\r\n            <ul className=\"list-group list-group-horizontal\">{items}</ul>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default ProgressMeter;\r\n\r\n","\r\nimport React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport './style.css';\r\n\r\nenum COLORSTATUS {\r\n    empty = \"empty\",\r\n    valid = \"valid\",\r\n    invalid = \"invalid\",\r\n    same = \"same\",\r\n    incomplete = \"incomplete\"\r\n}\r\n\r\nconst messageLookup = new Map<COLORSTATUS, string>([\r\n    [COLORSTATUS.empty, \"No Color provided\"],\r\n    [COLORSTATUS.valid, \"Valid Color provided\"],\r\n    [COLORSTATUS.invalid, \"Color is invalid\"],\r\n    [COLORSTATUS.same, \"Color is not new\"],\r\n    [COLORSTATUS.incomplete, \"Color must have 6 characters\"]\r\n]);\r\n\r\nfunction ColorInput(props: {\r\n    color: string,\r\n    pages: string,\r\n    updateColors: (color: string, newColor: string | null) => any\r\n}) {\r\n\r\n    function copyColorcode(event: React.MouseEvent): void {\r\n        const htmlparagraph_colorcode = event.target as HTMLParagraphElement;\r\n        const temp_input_elem = document.createElement(\"input\");\r\n        temp_input_elem.value = props.color;\r\n        htmlparagraph_colorcode.after(temp_input_elem);\r\n        temp_input_elem.select()\r\n        document.execCommand(\"copy\");\r\n        temp_input_elem.remove();\r\n    }\r\n\r\n    const handleOnBlur = () => {\r\n        switch (status) {\r\n            case COLORSTATUS.empty:\r\n            case COLORSTATUS.same:\r\n                props.updateColors(props.color, \"\");\r\n                break;\r\n            case COLORSTATUS.valid:\r\n                props.updateColors(props.color, value);\r\n                break;\r\n            case COLORSTATUS.invalid:\r\n            case COLORSTATUS.incomplete:\r\n            default:\r\n                props.updateColors(props.color, null);\r\n                break;\r\n        }\r\n    }\r\n\r\n    const handleOnChange = (event: React.ChangeEvent) => {\r\n        const nval = (event.target as HTMLInputElement)\r\n            .value\r\n            .replace(/[^a-f0-9]/gi, '')\r\n            .substring(0, 6)\r\n            .toLowerCase();\r\n        switch (nval.length) {\r\n            case 0:\r\n                // input is empty string => reset entry\r\n                // => display default indicator\r\n                setStatus(COLORSTATUS.empty)\r\n                break;\r\n            case 1:\r\n            case 2:\r\n            case 3:\r\n            case 4:\r\n            case 5:\r\n                // color code is invalid as it is less than 6 characters but can still become valid\r\n                // => display soem other indicator\r\n                setStatus(COLORSTATUS.incomplete);\r\n                break;\r\n            case 6:\r\n                if (nval === props.color.replace(/[^a-f0-9]/gi, '')) {\r\n                    // color code is valid but same as original color\r\n                    // => display orange indicator\r\n                    setStatus(COLORSTATUS.same)\r\n                } else {\r\n                    // color code is valid and not same as original color\r\n                    // => display green indicator and color preview\r\n                    setStatus(COLORSTATUS.valid);\r\n                }\r\n                break;\r\n            default:\r\n                // color code is invalid\r\n                // => display red indicator\r\n                // should not be reachable\r\n                setStatus(COLORSTATUS.invalid);\r\n        }\r\n        setValue(nval);\r\n        return;\r\n    }\r\n\r\n    const [status, setStatus] = useState(COLORSTATUS.empty);\r\n    const [value, setValue] = useState(\"\");\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"colorcode\" style={{ backgroundColor: props.color }}>\r\n                <div\r\n                    id={`pre-${props.color}`}\r\n                    className=\"right-side\"\r\n                    style={{ backgroundColor: `#${value}`, display: status === COLORSTATUS.valid ? \"block\" : \"None\" }}\r\n                ></div>\r\n                <p\r\n                    onClick={copyColorcode}>{props.color}\r\n                </p>\r\n            </div>\r\n            <p className=\"pages\">{props.pages}</p>\r\n            <OverlayTrigger\r\n                placement=\"bottom-start\"\r\n                transition={false} // necessary to prevent deprecation warning for findDOMNode\r\n                overlay={\r\n                    <Tooltip\r\n                        id={`tooltip-id-${props.color}`}\r\n                        show={status !== COLORSTATUS.empty}\r\n                    >\r\n                        {messageLookup.get(status)}\r\n                    </Tooltip>}\r\n            >\r\n                {({ ref, ...triggerHandler }) => (\r\n                    <InputGroup\r\n                        {...triggerHandler}>\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text\r\n                                ref={ref}\r\n                                id={`input-${props.color}`}\r\n                                className={status}\r\n                            >#</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl\r\n                            placeholder=\"new Color\"\r\n                            aria-placeholder=\"new Color\"\r\n                            aria-label=\"new Color\"\r\n                            aria-describedby={`input-${props.color}`}\r\n                            value={value}\r\n                            onBlur={handleOnBlur}\r\n                            onChange={handleOnChange}\r\n                        />\r\n                    </InputGroup >\r\n                )}\r\n            </OverlayTrigger>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default ColorInput;","function beforeUnloadListener(event: Event) {\r\n    event.preventDefault();\r\n    event.returnValue = true;\r\n}\r\n\r\nexport default beforeUnloadListener;","import React, { useState } from 'react';\r\nimport ColorInput from '../ColorInput'\r\nimport './style.css';\r\nimport 'animate.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport update from 'immutability-helper';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport beforeUnloadListener from '../listeners';\r\n\r\n// TODO: exclude pages\r\n\r\nfunction ColorForm(props: { state: () => any, handleChange: (b64: string) => any }) {\r\n    // ask for confirmation before leaving page\r\n    window.addEventListener('beforeunload', beforeUnloadListener);\r\n\r\n    const state = props.state();\r\n    const colors = state.colors;\r\n    const file = state.file;\r\n\r\n    const [formState, setFormState] = useState({\r\n        mapOldColorsToNewColors: new Map(),\r\n        errors: new Set(),\r\n        alert: {\r\n            type: \"danger\",\r\n            msg: \"You submitted invalid new colors for: \",\r\n            active: false\r\n        },\r\n        waitingForServerResponse: false\r\n    });\r\n\r\n    const colorInputsArray: Array<JSX.Element> = [];\r\n\r\n    for (var index in colors) {\r\n        colorInputsArray.push(\r\n            <ColorInput\r\n                updateColors={(color: string, newColor: string | null) => {\r\n                    if (newColor === null) {\r\n                        // Error-Case\r\n                        setFormState((state) => update(state, {\r\n                            mapOldColorsToNewColors: { $remove: [color] },\r\n                            errors: { $add: [color] }\r\n                        }));\r\n                    } else if (newColor === \"\") {\r\n                        // Reset-Case\r\n                        setFormState((state) => update(state, {\r\n                            mapOldColorsToNewColors: { $remove: [color] },\r\n                            errors: { $remove: [color] }\r\n                        }));\r\n                    } else {\r\n                        // Valid-Color-Case\r\n                        setFormState((state) => update(state, {\r\n                            mapOldColorsToNewColors: { $add: [[color, newColor]] },\r\n                            errors: { $remove: [color] }\r\n                        }));\r\n                        if (formState.alert.msg === \"No valid Colors were provided\") {\r\n                            setFormState((state) => update(state, {\r\n                                alert: {\r\n                                    active: { $set: false },\r\n                                }\r\n                            }));\r\n                        }\r\n                    }\r\n                }}\r\n                key={index}\r\n                color={colors[index][0]}\r\n                pages={colors[index][1]}\r\n            />);\r\n    }\r\n\r\n    return (\r\n        <form id=\"form-colors\" autoComplete=\"off\">\r\n            <p><b>Showing Colors for: </b>{file.name}</p>\r\n            <div className=\"analysis_result\">\r\n                {colorInputsArray}\r\n            </div>\r\n            <div className=\"status-wrapper\">\r\n                <Alert\r\n                    variant={formState.alert.type}\r\n                    id=\"submit-status\"\r\n                    hidden={formState.errors.size === 0 && !formState.alert.active}>\r\n                    <Spinner\r\n                        animation=\"border\"\r\n                        role=\"status\"\r\n                        hidden={formState.alert.msg !== \"Waiting for Server response...\"}></Spinner>\r\n                    {(formState.errors.size !== 0 ? \"You submitted invalid new colors for: \" + Array.from(formState.errors).join(\", \") : formState.alert.msg)}\r\n                </Alert>\r\n            </div>\r\n            <Button type=\"submit\"\r\n                onClick={\r\n                    ((event: React.MouseEvent) => {\r\n                        event.preventDefault();\r\n                        if (formState.errors.size !== 0) {\r\n                            const element = document.querySelector('#submit-status');\r\n                            element?.classList.add('animate__animated', 'animate__pulse');\r\n                            setTimeout(function () {\r\n                                element?.classList.remove('animate__pulse');\r\n                            }, 1000);\r\n                        } else if (formState.mapOldColorsToNewColors.size > 0) {\r\n                            setFormState((state) => update(state, {\r\n                                alert: {\r\n                                    active: { $set: true },\r\n                                    type: { $set: \"info\" },\r\n                                    msg: { $set: \"Waiting for Server response...\" }\r\n                                }\r\n                            }));\r\n                            var data: FormData = new FormData();\r\n                            const pdf = file as Blob;\r\n                            data.append('file', pdf);\r\n                            formState.mapOldColorsToNewColors.forEach((value, key) => {\r\n                                data.append(key, value);\r\n                            });\r\n                            fetch(\"/ajax/process\", {\r\n                                method: 'POST',\r\n                                body: data\r\n                            })\r\n                                .then(response => {\r\n                                    if (!response.ok) {\r\n                                        throw Error(response.statusText);\r\n                                    }\r\n                                    return response;\r\n                                })\r\n                                .then(response => response.json())\r\n                                .then(response => {\r\n                                    if (response.error) {\r\n                                        setFormState((state) => update(state, {\r\n                                            alert: {\r\n                                                active: { $set: true },\r\n                                                type: { $set: \"danger\" },\r\n                                                msg: { $set: \"Request came back with the following error message: \" + response.message }\r\n                                            }\r\n                                        }));\r\n                                    } else {\r\n                                        props.handleChange(response.b64);\r\n                                    }\r\n                                })\r\n                                .catch(function (error) {\r\n                                    setFormState((state) => update(state, {\r\n                                        alert: {\r\n                                            active: { $set: true },\r\n                                            type: { $set: \"danger\" },\r\n                                            msg: { $set: \"Request failed: \" + error }\r\n                                        }\r\n                                    }));\r\n                                });\r\n                        } else {\r\n                            setFormState((state) => update(state, {\r\n                                alert: {\r\n                                    active: { $set: true },\r\n                                    type: { $set: \"danger\" },\r\n                                    msg: { $set: \"No valid Colors were provided\" }\r\n                                }\r\n                            }));\r\n                        }\r\n                    })\r\n                }\r\n                block\r\n                disabled={formState.alert.msg === \"Waiting for Server response...\"}>\r\n                {formState.alert.msg !== \"Waiting for Server response...\" ? \"Submit Colors\" : \"Waiting...\"}</Button>\r\n        </form >\r\n\r\n    );\r\n}\r\n\r\nexport default ColorForm;\r\n\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './style.css';\r\nimport beforeUnloadListener from '../listeners';\r\n\r\nfunction Download(props: {\r\n    b64: () => string,\r\n    oldFileName: () => string | undefined\r\n}) {\r\n\r\n    const oldFileName = props.oldFileName();\r\n    const newFileName = oldFileName?.split(\".pdf\")[0] + \"-printable\";\r\n\r\n    return (\r\n        <div>\r\n            <h4 className=\"mb-3\">PDF Document</h4>\r\n            <a\r\n                href={\"data:application/pdf;base64,\" + props.b64()}\r\n                className=\"btn btn-success btn-block\"\r\n                download={newFileName}\r\n                onClick={() => {\r\n                    // stop asking for confirmation before leaving page\r\n                    window.removeEventListener('beforeunload', beforeUnloadListener);\r\n                }\r\n                }>\r\n                Download your new PDF!\r\n                </a>\r\n            <p className=\"next\">Do you want to{\" \"}\r\n                <a\r\n                    href=\"/\"\r\n                >\r\n                    process another Document?</a>\r\n            </p>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Download;","import React from 'react';\r\nimport FileUpload from './Components/FileUpload';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport ProgressMeter from './Components/ProgressMeter';\r\nimport ColorForm from './Components/ColorForm'\r\nimport Download from './Components/Download';\r\n\r\nenum Progress {\r\n  initial = 0,\r\n  submittedPDF = 1,\r\n  submittedColors = 2\r\n}\r\n\r\ntype ComponentMap = { [key in Progress]: JSX.Element | null }\r\n\r\nclass App extends React.Component<{}, { colors: Array<Array<String>> | null, progress: Progress, file: File | null, b64: string }> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      colors: null,\r\n      progress: Progress.initial,\r\n      file: null,\r\n      b64: \"\"\r\n    }\r\n  }\r\n\r\n  displayWarning(msg: String): void {\r\n    alert(msg);\r\n  }\r\n\r\n\r\n  readonly componentsByProgress: ComponentMap = {\r\n    [Progress.initial]:\r\n      <FileUpload\r\n        showColors={\r\n          (colors: Array<Array<String>>, file: File) => {\r\n            this.setState({ colors: colors, progress: Progress.submittedPDF, file: file });\r\n          }} ></FileUpload >,\r\n    [Progress.submittedPDF]:\r\n      <ColorForm\r\n        state={() => { return this.state; }}\r\n        handleChange={\r\n          (b64_in: string) => { this.setState({ b64: b64_in, progress: Progress.submittedColors }); }\r\n        } ></ColorForm >,\r\n    [Progress.submittedColors]:\r\n      <Download\r\n        b64={() => { return this.state.b64; }}\r\n        oldFileName={() => { return this.state.file?.name }}></Download>,\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ProgressMeter progress_enum={Progress} progress={this.state.progress}></ProgressMeter>\r\n        {this.componentsByProgress[this.state.progress]}\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}